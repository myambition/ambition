// Code generated by truss. DO NOT EDIT.
// Rerunning truss will overwrite this file.
// Version: d5b3153b9f
// Version Date: Thu Jul 27 18:20:46 UTC 2017

package svc

// This file contains methods to make individual endpoints from services,
// request and response types to serve those endpoints, as well as encoders and
// decoders for those types, for all of our supported transport serialization
// formats.

import (
	"fmt"
	"golang.org/x/net/context"

	"github.com/go-kit/kit/endpoint"

	pb "github.com/adamryman/ambition/services/model/model-service"
)

// Endpoints collects all of the endpoints that compose an add service. It's
// meant to be used as a helper struct, to collect all of the endpoints into a
// single parameter.
//
// In a server, it's useful for functions that need to operate on a per-endpoint
// basis. For example, you might pass an Endpoints to a function that produces
// an http.Handler, with each method (endpoint) wired up to a specific path. (It
// is probably a mistake in design to invoke the Service methods on the
// Endpoints struct in a server.)
//
// In a client, it's useful to collect individually constructed endpoints into a
// single type that implements the Service interface. For example, you might
// construct individual endpoints using transport/http.NewClient, combine them into an Endpoints, and return it to the caller as a Service.
type Endpoints struct {
	CreateActionEndpoint          endpoint.Endpoint
	CreateOccurrenceEndpoint      endpoint.Endpoint
	ReadActionEndpoint            endpoint.Endpoint
	ReadActionsEndpoint           endpoint.Endpoint
	ReadOccurrencesByDateEndpoint endpoint.Endpoint
	ReadOccurrencesEndpoint       endpoint.Endpoint
}

// Endpoints

func (e Endpoints) CreateAction(ctx context.Context, in *pb.Action) (*pb.Action, error) {
	response, err := e.CreateActionEndpoint(ctx, in)
	if err != nil {
		return nil, err
	}
	return response.(*pb.Action), nil
}

func (e Endpoints) CreateOccurrence(ctx context.Context, in *pb.CreateOccurrenceRequest) (*pb.Occurrence, error) {
	response, err := e.CreateOccurrenceEndpoint(ctx, in)
	if err != nil {
		return nil, err
	}
	return response.(*pb.Occurrence), nil
}

func (e Endpoints) ReadAction(ctx context.Context, in *pb.Action) (*pb.Action, error) {
	response, err := e.ReadActionEndpoint(ctx, in)
	if err != nil {
		return nil, err
	}
	return response.(*pb.Action), nil
}

func (e Endpoints) ReadActions(ctx context.Context, in *pb.User) (*pb.ActionsResponse, error) {
	response, err := e.ReadActionsEndpoint(ctx, in)
	if err != nil {
		return nil, err
	}
	return response.(*pb.ActionsResponse), nil
}

func (e Endpoints) ReadOccurrencesByDate(ctx context.Context, in *pb.OccurrencesByDateReq) (*pb.OccurrencesResponse, error) {
	response, err := e.ReadOccurrencesByDateEndpoint(ctx, in)
	if err != nil {
		return nil, err
	}
	return response.(*pb.OccurrencesResponse), nil
}

func (e Endpoints) ReadOccurrences(ctx context.Context, in *pb.Action) (*pb.OccurrencesResponse, error) {
	response, err := e.ReadOccurrencesEndpoint(ctx, in)
	if err != nil {
		return nil, err
	}
	return response.(*pb.OccurrencesResponse), nil
}

// Make Endpoints

func MakeCreateActionEndpoint(s pb.ModelServer) endpoint.Endpoint {
	return func(ctx context.Context, request interface{}) (response interface{}, err error) {
		req := request.(*pb.Action)
		v, err := s.CreateAction(ctx, req)
		if err != nil {
			return nil, err
		}
		return v, nil
	}
}

func MakeCreateOccurrenceEndpoint(s pb.ModelServer) endpoint.Endpoint {
	return func(ctx context.Context, request interface{}) (response interface{}, err error) {
		req := request.(*pb.CreateOccurrenceRequest)
		v, err := s.CreateOccurrence(ctx, req)
		if err != nil {
			return nil, err
		}
		return v, nil
	}
}

func MakeReadActionEndpoint(s pb.ModelServer) endpoint.Endpoint {
	return func(ctx context.Context, request interface{}) (response interface{}, err error) {
		req := request.(*pb.Action)
		v, err := s.ReadAction(ctx, req)
		if err != nil {
			return nil, err
		}
		return v, nil
	}
}

func MakeReadActionsEndpoint(s pb.ModelServer) endpoint.Endpoint {
	return func(ctx context.Context, request interface{}) (response interface{}, err error) {
		req := request.(*pb.User)
		v, err := s.ReadActions(ctx, req)
		if err != nil {
			return nil, err
		}
		return v, nil
	}
}

func MakeReadOccurrencesByDateEndpoint(s pb.ModelServer) endpoint.Endpoint {
	return func(ctx context.Context, request interface{}) (response interface{}, err error) {
		req := request.(*pb.OccurrencesByDateReq)
		v, err := s.ReadOccurrencesByDate(ctx, req)
		if err != nil {
			return nil, err
		}
		return v, nil
	}
}

func MakeReadOccurrencesEndpoint(s pb.ModelServer) endpoint.Endpoint {
	return func(ctx context.Context, request interface{}) (response interface{}, err error) {
		req := request.(*pb.Action)
		v, err := s.ReadOccurrences(ctx, req)
		if err != nil {
			return nil, err
		}
		return v, nil
	}
}

// WrapAllExcept wraps each Endpoint field of struct Endpoints with a
// go-kit/kit/endpoint.Middleware.
// Use this for applying a set of middlewares to every endpoint in the service.
// Optionally, endpoints can be passed in by name to be excluded from being wrapped.
// WrapAllExcept(middleware, "Status", "Ping")
func (e *Endpoints) WrapAllExcept(middleware endpoint.Middleware, excluded ...string) {
	included := map[string]struct{}{
		"CreateAction":          struct{}{},
		"CreateOccurrence":      struct{}{},
		"ReadAction":            struct{}{},
		"ReadActions":           struct{}{},
		"ReadOccurrencesByDate": struct{}{},
		"ReadOccurrences":       struct{}{},
	}

	for _, ex := range excluded {
		if _, ok := included[ex]; !ok {
			panic(fmt.Sprintf("Excluded endpoint '%s' does not exist; see middlewares/endpoints.go", ex))
		}
		delete(included, ex)
	}

	for inc, _ := range included {
		if inc == "CreateAction" {
			e.CreateActionEndpoint = middleware(e.CreateActionEndpoint)
		}
		if inc == "CreateOccurrence" {
			e.CreateOccurrenceEndpoint = middleware(e.CreateOccurrenceEndpoint)
		}
		if inc == "ReadAction" {
			e.ReadActionEndpoint = middleware(e.ReadActionEndpoint)
		}
		if inc == "ReadActions" {
			e.ReadActionsEndpoint = middleware(e.ReadActionsEndpoint)
		}
		if inc == "ReadOccurrencesByDate" {
			e.ReadOccurrencesByDateEndpoint = middleware(e.ReadOccurrencesByDateEndpoint)
		}
		if inc == "ReadOccurrences" {
			e.ReadOccurrencesEndpoint = middleware(e.ReadOccurrencesEndpoint)
		}
	}
}

// LabeledMiddleware will get passed the endpoint name when passed to
// WrapAllLabeledExcept, this can be used to write a generic metrics
// middleware which can send the endpoint name to the metrics collector.
type LabeledMiddleware func(string, endpoint.Endpoint) endpoint.Endpoint

// WrapAllLabeledExcept wraps each Endpoint field of struct Endpoints with a
// LabeledMiddleware, which will receive the name of the endpoint. See
// LabeldMiddleware. See method WrapAllExept for details on excluded
// functionality.
func (e *Endpoints) WrapAllLabeledExcept(middleware func(string, endpoint.Endpoint) endpoint.Endpoint, excluded ...string) {
	included := map[string]struct{}{
		"CreateAction":          struct{}{},
		"CreateOccurrence":      struct{}{},
		"ReadAction":            struct{}{},
		"ReadActions":           struct{}{},
		"ReadOccurrencesByDate": struct{}{},
		"ReadOccurrences":       struct{}{},
	}

	for _, ex := range excluded {
		if _, ok := included[ex]; !ok {
			panic(fmt.Sprintf("Excluded endpoint '%s' does not exist; see middlewares/endpoints.go", ex))
		}
		delete(included, ex)
	}

	for inc, _ := range included {
		if inc == "CreateAction" {
			e.CreateActionEndpoint = middleware("CreateAction", e.CreateActionEndpoint)
		}
		if inc == "CreateOccurrence" {
			e.CreateOccurrenceEndpoint = middleware("CreateOccurrence", e.CreateOccurrenceEndpoint)
		}
		if inc == "ReadAction" {
			e.ReadActionEndpoint = middleware("ReadAction", e.ReadActionEndpoint)
		}
		if inc == "ReadActions" {
			e.ReadActionsEndpoint = middleware("ReadActions", e.ReadActionsEndpoint)
		}
		if inc == "ReadOccurrencesByDate" {
			e.ReadOccurrencesByDateEndpoint = middleware("ReadOccurrencesByDate", e.ReadOccurrencesByDateEndpoint)
		}
		if inc == "ReadOccurrences" {
			e.ReadOccurrencesEndpoint = middleware("ReadOccurrences", e.ReadOccurrencesEndpoint)
		}
	}
}
